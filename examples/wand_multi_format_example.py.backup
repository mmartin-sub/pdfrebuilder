#!/usr/bin/env python3
"""
Example demonstrating Wand multi-format support (Tasks 6.1 and 6.2).

This example shows how to:
1. Process JPEG/PNG/GIF images as single-layer documents
2. Handle multi-page TIFF files
3. Extract images with proper metadata and structure

Usage:
    python examples/wand_multi_format_example.py
"""

import os
import sys
import tempfile

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.engine.document_parser import WandParser
from src.engine.extract_wand_content import _detect_image_format, check_wand_availability, extract_wand_content


def create_test_images():
    """Create test images for demonstration using Wand."""
    test_images = {}

    try:
        from wand.color import Color as WandColor
        from wand.image import Image

        # Create a simple PNG (10x10 pixel red square)
        with Image(width=10, height=10, background=WandColor("red")) as img:
            img.format = "png"
            temp_file = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
            img.save(filename=temp_file.name)
            test_images["test.png"] = temp_file.name

        # Create a simple GIF (10x10 pixel blue square)
        with Image(width=10, height=10, background=WandColor("blue")) as img:
            img.format = "gif"
            temp_file = tempfile.NamedTemporaryFile(suffix=".gif", delete=False)
            img.save(filename=temp_file.name)
            test_images["test.gif"] = temp_file.name

    except ImportError:
        print("  Warning: Could not create test images (Wand not available)")
        return {}
    except Exception as e:
        print(f"  Warning: Could not create test images: {e}")
        return {}

    return test_images


def main():
    """Main example function."""
    print("=== Wand Multi-Format Support Example ===\n")

    # 1. Check Wand availability
    print("1. Checking Wand availability...")
    is_available, info = check_wand_availability()

    if not is_available:
        print(f"✗ Wand is not available: {info.get('error', 'unknown error')}")
        return

    print("✓ Wand is available!")
    print(f"  - Wand version: {info.get('wand_version', 'unknown')}")

    # 2. Test format detection
    print("\n2. Testing format detection...")
    test_files = [
        "image.png",
        "photo.jpg",
        "animation.gif",
        "document.tiff",
        "design.psd",
        "bitmap.bmp",
        "unknown.xyz",
    ]

    for filename in test_files:
        detected_format = _detect_image_format(filename)
        print(f"  - {filename} -> {detected_format}")

    # 3. Create test images and process them
    print("\n3. Creating and processing test images...")
    test_images = create_test_images()

    try:
        parser = WandParser()

        for image_name, image_path in test_images.items():
            print(f"\n  Processing {image_name}:")

            # Check if parser can handle this file
            from unittest.mock import patch

            with patch(
                "src.engine.document_parser.detect_file_format",
                return_value=_detect_image_format(image_name),
            ):
                can_parse = parser.can_parse(image_path)
                print(f"    - Can parse: {can_parse}")

                if can_parse:
                    try:
                        # Extract content
                        document = extract_wand_content(image_path)

                        print(
                            f"    - Document structure units: {len(document.document_structure)}"
                        )
                        print(f"    - Engine: {document.engine}")
                        print(f"    - Format: {document.metadata.format}")

                        # Analyze structure
                        for i, unit in enumerate(document.document_structure):
                            if hasattr(unit, "canvas_name"):
                                print(f"    - Canvas {i + 1}: {unit.canvas_name}")
                                print(f"      - Size: {unit.size}")
                                print(f"      - Layers: {len(unit.layers)}")

                                for j, layer in enumerate(unit.layers):
                                    print(
                                        f"        - Layer {j + 1}: {layer.layer_name}"
                                    )
                                    print(f"          - Type: {layer.layer_type.value}")
                                    print(
                                        f"          - Content elements: {len(layer.content)}"
                                    )

                                    for k, element in enumerate(layer.content):
                                        if (
                                            hasattr(element, "get")
                                            and element.get("type") == "image"
                                        ):
                                            print(
                                                f"            - Image {k + 1}: {element.get('original_format', 'unknown')}"
                                            )
                                            print(
                                                f"              - File: {element.get('image_file', 'unknown')}"
                                            )
                                            print(
                                                f"              - Has transparency: {element.get('has_transparency', False)}"
                                            )

                    except Exception as e:
                        print(f"    - Error processing: {e}")

    finally:
        # Clean up test files
        for image_path in test_images.values():
            try:
                os.unlink(image_path)
            except Exception:
                pass

    # 4. Demonstrate multi-page TIFF detection (mock)
    print("\n4. Multi-page TIFF detection example:")
    print("  Note: This would require actual TIFF files to demonstrate fully.")
    print(
        "  The system can detect and extract multi-page TIFF files as separate canvas units."
    )
    print(
        "  Each page becomes a separate document unit in the Universal IDM structure."
    )

    # 5. Show supported formats and their handling
    print("\n5. Supported formats and handling:")
    format_info = [
        ("JPEG", "Single-layer image -> Single canvas with base layer"),
        (
            "PNG",
            "Single-layer image (with transparency) -> Single canvas with base layer",
        ),
        ("GIF", "Single-layer image (animated GIFs use first frame) -> Single canvas"),
        ("BMP", "Single-layer bitmap -> Single canvas with base layer"),
        ("TIFF", "Single or multi-page -> Single canvas or multiple canvas units"),
        ("PSD", "Layered document -> Single canvas with multiple layers"),
        ("PSB", "Large layered document -> Single canvas with multiple layers"),
    ]

    for format_name, description in format_info:
        print(f"  - {format_name}: {description}")

    # 6. Configuration tips for multi-format processing
    print("\n6. Configuration tips for multi-format processing:")
    print("  - Set 'image_format: png' to preserve transparency in extracted images")
    print("  - Set 'image_format: jpeg' for smaller file sizes (no transparency)")
    print("  - Use 'enhance_images: true' to improve quality of low-resolution images")
    print("  - Set 'color_management: true' to ensure consistent colors across formats")
    print("  - For TIFF files, each page will be extracted as a separate image")

    print("\n=== Multi-format support example completed! ===")


if __name__ == "__main__":
    main()
