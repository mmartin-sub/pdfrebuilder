#!/usr/bin/env python3
"""
Example demonstrating the Wand input engine for processing PSD and image files.

This example shows how to:
1. Check Wand availability
2. Configure the Wand engine
3. Process different image formats
4. Extract layers and metadata

Usage:
    python examples/wand_engine_example.py
"""

import os
import sys
import tempfile

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.engine.document_parser import WandParser, get_parser_by_engine
from src.engine.extract_wand_content import (
    check_tesseract_availability,
    check_wand_availability,
    get_wand_config,
    validate_wand_config,
)


def main():
    """Main example function."""
    print("=== Wand Input Engine Example ===\n")

    # 1. Check Wand availability
    print("1. Checking Wand availability...")
    is_available, info = check_wand_availability()

    if is_available:
        print("✓ Wand is available!")
        print(f"  - Wand version: {info.get('wand_version', 'unknown')}")
        print(f"  - ImageMagick version: {info.get('imagemagick_version', 'unknown')}")
    else:
        print(f"✗ Wand is not available: {info.get('error', 'unknown error')}")
        print(f"  Install command: {info.get('install_command', 'pip install Wand')}")
        return

    # 2. Check Tesseract availability (optional for OCR)
    print("\n2. Checking Tesseract availability (for OCR)...")
    tesseract_available, tesseract_info = check_tesseract_availability()

    if tesseract_available:
        print("✓ Tesseract is available!")
        print(f"  - Version: {tesseract_info.get('tesseract_version', 'unknown')}")
    else:
        print(
            f"✗ Tesseract is not available: {tesseract_info.get('error', 'unknown error')}"
        )
        print("  (OCR features will not be available)")

    # 3. Get and validate Wand configuration
    print("\n3. Getting Wand configuration...")
    config = get_wand_config()

    print("Current configuration:")
    for key, value in config.items():
        print(f"  - {key}: {value}")

    is_valid, errors = validate_wand_config(config)
    if is_valid:
        print("✓ Configuration is valid")
    else:
        print(f"✗ Configuration errors: {errors}")

    # 4. Test engine selection
    print("\n4. Testing engine selection...")

    # Create a simple test image
    test_image_data = create_test_png()

    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
        temp_file.write(test_image_data)
        temp_path = temp_file.name

    try:
        # Test getting Wand parser specifically
        print("  - Getting Wand parser...")
        wand_parser = WandParser()

        # Mock file format detection for this example
        from unittest.mock import patch

        with patch("src.engine.document_parser.detect_file_format", return_value="png"):
            can_parse = wand_parser.can_parse(temp_path)
            print(f"  - Can parse PNG file: {can_parse}")

            if can_parse:
                print("  - Wand parser can handle this file type")

            # Test engine selection by name
            try:
                selected_parser = get_parser_by_engine("wand", temp_path)
                print(
                    f"  - Successfully selected Wand engine: {type(selected_parser).__name__}"
                )
            except Exception as e:
                print(f"  - Error selecting Wand engine: {e}")

    finally:
        os.unlink(temp_path)

    # 5. Show supported formats
    print("\n5. Supported formats:")
    supported_formats = [
        "PSD (Adobe Photoshop)",
        "PSB (Large Adobe Photoshop)",
        "TIFF (Tagged Image File Format)",
        "PNG (Portable Network Graphics)",
        "JPEG (Joint Photographic Experts Group)",
        "GIF (Graphics Interchange Format)",
        "BMP (Bitmap)",
        "SVG (Scalable Vector Graphics) - limited",
        "XCF (GIMP) - limited",
        "AI (Adobe Illustrator) - limited",
    ]

    for fmt in supported_formats:
        print(f"  - {fmt}")

    # 6. Configuration tips
    print("\n6. Configuration tips:")
    print("  - Set 'enhance_images: true' to apply automatic image enhancements")
    print(
        "  - Set 'use_ocr: true' to extract text from rasterized text layers (requires Tesseract)"
    )
    print("  - Adjust 'density' (DPI) for higher quality extraction (default: 300)")
    print("  - Use 'image_format: webp' for smaller file sizes with good quality")
    print("  - Enable 'color_management: true' for consistent color reproduction")

    print("\n=== Example completed successfully! ===")


def create_test_png():
    """Create a simple test PNG image data."""
    # This is a minimal 1x1 pixel PNG
    return (
        b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01"
        b"\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13"
        b"\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x12IDATx\x9cc```"
        b"bPPP\x00\x02\xac\xea\x05\x1b\x00\x00\x00\x00IEND\xaeB`\x82"
    )


if __name__ == "__main__":
    main()
