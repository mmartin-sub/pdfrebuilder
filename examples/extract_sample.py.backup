#!/usr/bin/env python3
"""
Example script to extract content from a sample PDF file.

This example demonstrates how to use the PDF extraction functionality
to extract text, images, and drawings from a PDF file and save the
results to a JSON configuration file.
"""

import os
import sys
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import after path setup - required for src module access
from src.engine.extract_pdf_content_fitz import extract_pdf_content  # noqa: E402
from src.tools import serialize_pdf_content_to_config  # noqa: E402


def main():
    # Define the input and output paths (relative to project root)
    input_pdf = os.path.join(project_root, "input", "sample.pdf")
    output_json = os.path.join(
        project_root, "examples", "output", "sample_content.json"
    )

    # Ensure output directory exists
    os.makedirs(os.path.dirname(output_json), exist_ok=True)

    # Check if input file exists
    if not os.path.exists(input_pdf):
        print(f"Error: Input file not found: {input_pdf}")
        print("Please place a sample PDF file in the input/ directory.")
        print("Available files in input/:")
        input_dir = os.path.join(project_root, "input")
        if os.path.exists(input_dir):
            for file in os.listdir(input_dir):
                if file.endswith(".pdf"):
                    print(f"  - {file}")
        return

    # Extract content from the PDF
    print(f"Extracting content from {input_pdf}...")
    extraction_flags = {
        "include_text": True,
        "include_images": True,
        "include_drawings": True,
        "include_raw_background_drawings": True,
    }

    try:
        content = extract_pdf_content(input_pdf, extraction_flags)

        # Save the extracted content to a JSON file
        serialize_pdf_content_to_config(content, output_json)

        print(f"Content extracted and saved to {output_json}")
        print("You can now examine the extracted layout structure in the JSON file.")

        # Print some basic statistics about the extracted content
        if isinstance(content, dict) and "document_structure" in content:
            pages = content["document_structure"]
            print("\nExtraction Summary:")
            print(f"  - Total pages: {len(pages)}")

            total_text_elements = 0
            total_image_elements = 0
            total_drawing_elements = 0

            for page in pages:
                if "layers" in page:
                    for layer in page["layers"]:
                        if "content" in layer:
                            for element in layer["content"]:
                                if element.get("type") == "text":
                                    total_text_elements += 1
                                elif element.get("type") == "image":
                                    total_image_elements += 1
                                elif element.get("type") == "drawing":
                                    total_drawing_elements += 1

            print(f"  - Text elements: {total_text_elements}")
            print(f"  - Image elements: {total_image_elements}")
            print(f"  - Drawing elements: {total_drawing_elements}")

    except Exception as e:
        print(f"Error during extraction: {e}")
        print("This might be due to:")
        print("  - Incompatible PDF format")
        print("  - Missing dependencies")
        print("  - API changes in the extraction engine")
        print("\nFor troubleshooting, try running the main application:")
        print(f"  python main.py --input {input_pdf} --config layout_config.json")


if __name__ == "__main__":
    main()
