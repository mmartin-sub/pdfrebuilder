"""
Tests for documentation validation framework.
"""

import tempfile
from pathlib import Path

import pytest

from src.docs.validation import CodeExample, DocumentationValidator, ValidationStatus


class TestDocumentationValidator:
    """Test cases for DocumentationValidator."""

    def setup_method(self):
        """Set up test fixtures."""
        self.validator = DocumentationValidator()
        self.test_docs_dir = Path("test_docs")
        self.test_docs_dir.mkdir(exist_ok=True)

    def test_validate_simple_code_example(self):
        """Test validation of a simple working code example."""
        # Create a temporary markdown file with a code example
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# Test Documentation

Here's a simple Python example:

```python
print("Hello, World!")
```
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_code_examples(temp_file)

            # Should have one result
            assert len(results) == 1
            result = results[0]

            # Should pass
            assert result.status == ValidationStatus.PASSED
            assert "executed successfully" in result.message
            assert result.file_path == str(temp_file)

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_failing_code_example(self):
        """Test validation of a code example that fails."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# Test Documentation

This code will fail:

```python
import nonexistent_module
```
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_code_examples(temp_file)

            assert len(results) == 1
            result = results[0]

            # Should fail
            assert result.status == ValidationStatus.FAILED
            assert "failed to execute" in result.message

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_syntax_error_code_example(self):
        """Test validation of a code example with syntax error."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# Test Documentation

This code has syntax error:

```python
print("Hello World"
```
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_code_examples(temp_file)

            assert len(results) == 1
            result = results[0]

            # Should fail with syntax error
            assert result.status == ValidationStatus.FAILED
            assert "failed to execute" in result.message
            # Check that syntax error details are in the details field
            assert result.details is not None
            assert "Syntax error" in result.details.get("stdout", "")

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_api_references(self):
        """Test validation of API references."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# API Documentation

Use `json.loads()` to parse JSON.
Import with `import json`.
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_api_references(temp_file)

            # Should find references to json.loads and json module
            assert len(results) >= 1

            # At least one should pass (json is a standard library)
            passed_results = [r for r in results if r.status == ValidationStatus.PASSED]
            assert len(passed_results) >= 1

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_invalid_api_reference(self):
        """Test validation of invalid API reference."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# API Documentation

Use `nonexistent.module.function()` for something.
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_api_references(temp_file)

            assert len(results) >= 1

            # Should have at least one failed result
            failed_results = [r for r in results if r.status == ValidationStatus.FAILED]
            assert len(failed_results) >= 1

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_json_configuration(self):
        """Test validation of JSON configuration examples."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# Configuration

Valid JSON configuration:

```json
{
  "key": "value",
  "number": 42,
  "array": [1, 2, 3]
}
```
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_configuration_examples(temp_file)

            assert len(results) == 1
            result = results[0]

            # Should pass
            assert result.status == ValidationStatus.PASSED
            assert "JSON configuration example is valid" in result.message

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_invalid_json_configuration(self):
        """Test validation of invalid JSON configuration."""
        with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
            f.write(
                """
# Configuration

Invalid JSON configuration:

```json
{
  "key": "value",
  "invalid":
}
```
"""
            )
            temp_file = Path(f.name)

        try:
            results = self.validator.validate_configuration_examples(temp_file)

            assert len(results) == 1
            result = results[0]

            # Should fail
            assert result.status == ValidationStatus.FAILED
            assert "Invalid JSON configuration" in result.message

        finally:
            temp_file.unlink(missing_ok=True)

    def test_validate_nonexistent_file(self):
        """Test validation of nonexistent file."""
        nonexistent_file = Path("nonexistent_file.md")

        results = self.validator.validate_code_examples(nonexistent_file)

        assert len(results) == 1
        result = results[0]

        assert result.status == ValidationStatus.FAILED
        assert "not found" in result.message

    def test_extract_code_examples(self):
        """Test extraction of code examples from markdown."""
        content = """
# Test Document

Here's a Python example:

```python
print("Hello")
```

And a bash example:

```bash
echo "World"
```

Not a code block:
Some regular text.
"""

        examples = self.validator._extract_code_examples(content, "test.md")

        # Should extract 2 examples
        assert len(examples) == 2

        # Check first example
        assert examples[0].code == 'print("Hello")'
        assert examples[0].file_path == "test.md"

        # Check second example
        assert examples[1].code == 'echo "World"'

    def test_code_example_with_expected_output(self):
        """Test code example validation with expected output."""
        example = CodeExample(
            title="Test Example",
            description="Test description",
            code='print("Hello, World!")',
            expected_output="Hello, World!",
        )

        result = self.validator._validate_single_example(example)

        # Should pass with expected output
        assert result.status == ValidationStatus.PASSED
        assert "expected output" in result.message

    def test_code_example_with_wrong_expected_output(self):
        """Test code example validation with wrong expected output."""
        example = CodeExample(
            title="Test Example",
            description="Test description",
            code='print("Hello, World!")',
            expected_output="Wrong output",
        )

        result = self.validator._validate_single_example(example)

        # Should be a warning (executed but output doesn't match)
        assert result.status == ValidationStatus.WARNING
        assert "output doesn't match expected" in result.message


class TestCodeExample:
    """Test cases for CodeExample dataclass."""

    def test_code_example_creation(self):
        """Test creating a CodeExample instance."""
        example = CodeExample(
            title="Test Example",
            description="A test code example",
            code="print('hello')",
            expected_output="hello",
            setup_code="import sys",
            cleanup_code="pass",
        )

        assert example.title == "Test Example"
        assert example.description == "A test code example"
        assert example.code == "print('hello')"
        assert example.expected_output == "hello"
        assert example.setup_code == "import sys"
        assert example.cleanup_code == "pass"
        assert example.validation_status == ValidationStatus.SKIPPED


if __name__ == "__main__":
    pytest.main([__file__])
