"""
Tests for ReportLab engine functionality.
"""

import os
import tempfile

import pytest

from src.engine.pdf_engine_selector import get_engine_selector
from src.engine.reportlab_engine import ReportLabEngine
from src.font.font_validator import FontValidator
from src.models.universal_idm import (
    BlendMode,
    BoundingBox,
    Color,
    DocumentMetadata,
    FontDetails,
    Layer,
    LayerType,
    PageUnit,
    TextElement,
    UniversalDocument,
)


class TestReportLabEngine:
    """Test cases for ReportLab engine."""

    def setup_method(self):
        """Set up test fixtures."""
        self.font_validator = FontValidator()
        self.engine = ReportLabEngine(font_validator=self.font_validator)

    def create_test_document(self) -> UniversalDocument:
        """Create a test document for testing."""
        text_elements = [
            TextElement(
                id="title",
                bbox=BoundingBox(50, 50, 550, 100),
                raw_text="Test Document",
                text="Test Document",
                font_details=FontDetails(name="Helvetica", size=24, color=Color(0, 0, 0)),
                z_index=1,
            ),
            TextElement(
                id="subtitle",
                bbox=BoundingBox(50, 120, 550, 150),
                raw_text="Testing ReportLab Engine",
                text="Testing ReportLab Engine",
                font_details=FontDetails(name="Helvetica", size=16, color=Color(0.5, 0.5, 0.5)),
                z_index=2,
            ),
        ]

        layer = Layer(
            layer_id="main_content",
            layer_name="Main Content",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 600, 400),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=text_elements,
        )

        page = PageUnit(
            size=(600, 400),
            background_color=None,
            layers=[layer],
            page_number=0,
        )

        document = UniversalDocument(
            metadata=DocumentMetadata(format="pdf", title="Test Document"),
            document_structure=[page],
        )

        return document

    def test_engine_initialization(self):
        """Test ReportLab engine initialization."""
        assert self.engine.engine_name == "reportlab"
        assert self.engine.engine_version == "4.4.3"
        assert "font_embedding" in self.engine.supported_features
        assert self.engine.supported_features["font_embedding"] is True

    def test_engine_info(self):
        """Test engine information retrieval."""
        info = self.engine.get_engine_info()
        assert info["engine"] == "reportlab"
        assert info["version"] == "4.4.3"
        assert "font_embedding" in info["supported_features"]
        assert "registered_fonts" in info

    def test_font_validation(self):
        """Test font validation functionality."""
        # Test with a common font
        result = self.engine.validate_font_licensing("Helvetica")
        assert "font_name" in result
        assert "available" in result
        assert "embeddable" in result
        assert "status" in result
        assert "reason" in result

        # Test with a non-existent font
        result = self.engine.validate_font_licensing("NonExistentFont")
        assert result["font_name"] == "NonExistentFont"
        assert "status" in result

    def test_pdf_generation(self):
        """Test PDF generation functionality."""
        document = self.create_test_document()

        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
            output_path = tmp.name

        try:
            # Generate PDF
            self.engine.generate(document.to_dict(), output_path)

            # Check that file was created
            assert os.path.exists(output_path)
            assert os.path.getsize(output_path) > 0

        finally:
            # Clean up
            if os.path.exists(output_path):
                os.unlink(output_path)

    def test_engine_selector_integration(self):
        """Test integration with engine selector."""
        selector = get_engine_selector()

        # Test getting ReportLab engine
        engine = selector.get_engine("reportlab")
        assert isinstance(engine, ReportLabEngine)
        assert engine.engine_name == "reportlab"

        # Test listing available engines
        engines = selector.list_available_engines()
        assert "reportlab" in engines
        assert "pymupdf" in engines

    def test_engine_comparison(self):
        """Test engine comparison functionality."""
        selector = get_engine_selector()
        comparison = selector.compare_engines("reportlab", "pymupdf")

        assert "engine1" in comparison
        assert "engine2" in comparison
        assert "differences" in comparison

        # Check that ReportLab has more features
        reportlab_features = comparison["engine1"]["features"]
        _pymupdf_features = comparison["engine2"]["features"]

        # ReportLab should have font_embedding and transparency
        assert reportlab_features.get("font_embedding", False) is True
        assert reportlab_features.get("transparency", False) is True

    def test_document_serialization(self):
        """Test document serialization and deserialization."""
        document = self.create_test_document()

        # Convert to dict
        doc_dict = document.to_dict()
        assert isinstance(doc_dict, dict)
        assert "document_structure" in doc_dict

        # Convert back to document
        new_document = UniversalDocument.from_dict(doc_dict)
        assert isinstance(new_document, UniversalDocument)
        assert len(new_document.document_structure) == 1

    def test_error_handling(self):
        """Test error handling in the engine."""
        # Test with invalid document
        with pytest.raises(ValueError):
            self.engine.generate("invalid_config", "output.pdf")

        # Test with None document
        with pytest.raises(ValueError):
            self.engine.generate(None, "output.pdf")

    def test_font_registration(self):
        """Test font registration functionality."""
        # Test registering a font
        self.engine._register_font("Helvetica")
        assert "Helvetica" in self.engine._registered_fonts

        # Test registering the same font again (should not fail)
        self.engine._register_font("Helvetica")
        assert "Helvetica" in self.engine._registered_fonts

    def test_color_conversion(self):
        """Test color conversion functionality."""
        # Test color conversion
        color = Color(1.0, 0.5, 0.0, 1.0)  # Orange
        rl_color = self.engine._convert_color(color)

        assert rl_color.red == 1.0
        assert rl_color.green == 0.5
        assert rl_color.blue == 0.0
        assert rl_color.alpha == 1.0


def test_engine_selector_default_engine():
    """Test default engine selection."""
    selector = get_engine_selector()
    default_engine = selector.get_default_engine()
    assert isinstance(default_engine, ReportLabEngine)


def test_engine_selector_unknown_engine():
    """Test handling of unknown engine."""
    from src.engine.pdf_rendering_engine import EngineNotFoundError

    selector = get_engine_selector()

    with pytest.raises(EngineNotFoundError, match="Unknown PDF rendering engine"):
        selector.get_engine("unknown_engine")


if __name__ == "__main__":
    pytest.main([__file__])
