"""
Tests for the batch modification engine.

Tests batch text replacement, variable substitution, and font validation capabilities.
"""

import json
import os
import tempfile
from unittest.mock import Mock, patch

from src.engine.batch_modifier import BatchModificationResult, BatchModifier, VariableSubstitution
from src.models.universal_idm import (
    BlendMode,
    BoundingBox,
    Color,
    DocumentMetadata,
    FontDetails,
    Layer,
    LayerType,
    PageUnit,
    TextElement,
    UniversalDocument,
)


class TestBatchModifier:
    """Test the BatchModifier class."""

    def setup_method(self):
        """Set up test fixtures."""
        self.modifier = BatchModifier()

        # Create a test document
        self.test_document = self._create_test_document()

    def _create_test_document(self) -> UniversalDocument:
        """Create a test document with various text elements."""
        # Create text elements
        text_elements = [
            TextElement(
                id="text_1",
                bbox=BoundingBox(10, 10, 100, 30),
                raw_text="Hello World",
                text="Hello World",
                font_details=FontDetails(name="Arial", size=12, color=Color(0, 0, 0)),
                z_index=1,
            ),
            TextElement(
                id="text_2",
                bbox=BoundingBox(10, 40, 100, 60),
                raw_text="Welcome to ${COMPANY_NAME}",
                text="Welcome to ${COMPANY_NAME}",
                font_details=FontDetails(name="Times", size=14, color=Color(0, 0, 0)),
                z_index=2,
            ),
            TextElement(
                id="text_3",
                bbox=BoundingBox(10, 70, 100, 90),
                raw_text="Date: ${DATE}",
                text="Date: ${DATE}",
                font_details=FontDetails(name="Helvetica", size=10, color=Color(0, 0, 0)),
                z_index=3,
            ),
        ]

        # Create a layer
        layer = Layer(
            layer_id="test_layer",
            layer_name="Test Layer",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 200, 200),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=text_elements,
        )

        # Create a page
        page = PageUnit(
            page_number=0,
            size=(200, 200),
            background_color=None,
            layers=[layer],
        )

        # Create document
        document = UniversalDocument(
            engine="test",
            engine_version="1.0",
            metadata=DocumentMetadata(),
            document_structure=[page],
        )

        return document

    def test_batch_text_replacement_basic(self):
        """Test basic batch text replacement."""
        replacements = [("Hello", "Hi"), ("World", "Universe")]

        result = self.modifier.batch_text_replacement(
            document=self.test_document,
            replacements=replacements,
        )

        assert result.success
        assert result.modified_elements == 1
        assert result.skipped_elements == 2

        # Check that text was actually replaced
        text_element = self.test_document.document_structure[0].layers[0].content[0]
        assert text_element.text == "Hi Universe"

    def test_batch_text_replacement_with_element_filtering(self):
        """Test batch text replacement with element filtering."""
        replacements = [("Hello", "Hi")]

        result = self.modifier.batch_text_replacement(
            document=self.test_document,
            replacements=replacements,
            element_ids=["text_1"],
        )

        assert result.success
        assert result.modified_elements == 1
        assert result.skipped_elements == 2

        # Check that only the targeted element was modified
        text_element = self.test_document.document_structure[0].layers[0].content[0]
        assert text_element.text == "Hi World"

    def test_batch_text_replacement_with_page_filtering(self):
        """Test batch text replacement with page filtering."""
        replacements = [("Hello", "Hi")]

        result = self.modifier.batch_text_replacement(
            document=self.test_document,
            replacements=replacements,
            page_numbers=[0],
        )

        assert result.success
        assert result.modified_elements == 1
        assert result.skipped_elements == 2

    def test_variable_substitution_basic(self):
        """Test basic variable substitution."""
        variables = [
            VariableSubstitution(variable_name="COMPANY_NAME", replacement_value="Acme Corp"),
            VariableSubstitution(variable_name="DATE", replacement_value="2024-01-15"),
        ]

        result = self.modifier.variable_substitution(
            document=self.test_document,
            variables=variables,
        )

        assert result.success
        assert result.modified_elements == 2
        assert result.skipped_elements == 1

        # Check that variables were substituted
        text_elements = self.test_document.document_structure[0].layers[0].content
        assert text_elements[1].text == "Welcome to Acme Corp"
        assert text_elements[2].text == "Date: 2024-01-15"

    def test_variable_substitution_case_sensitive(self):
        """Test case-sensitive variable substitution."""
        variables = [
            VariableSubstitution(variable_name="company_name", replacement_value="Acme Corp"),
        ]

        result = self.modifier.variable_substitution(
            document=self.test_document,
            variables=variables,
        )

        assert result.success
        assert result.modified_elements == 0  # No match due to case sensitivity
        assert result.skipped_elements == 3

    def test_variable_substitution_case_insensitive(self):
        """Test case-insensitive variable substitution."""
        variables = [
            VariableSubstitution(
                variable_name="company_name",
                replacement_value="Acme Corp",
                case_sensitive=False,
            ),
        ]

        result = self.modifier.variable_substitution(
            document=self.test_document,
            variables=variables,
        )

        assert result.success
        assert result.modified_elements == 1
        assert result.skipped_elements == 2

    @patch("src.engine.batch_modifier.FontValidator")
    def test_font_validation(self, mock_font_validator):
        """Test font validation functionality."""
        # Mock font validator
        mock_validator = Mock()
        mock_validator.is_font_available.return_value = True
        mock_validator.check_glyph_coverage.return_value = True
        mock_validator.is_font_licensed.return_value = True
        mock_font_validator.return_value = mock_validator

        modifier = BatchModifier()

        validation_result = modifier.validate_document_fonts(
            document=self.test_document,
            check_licensing=True,
        )

        assert validation_result["overall_status"] == "passed"
        assert len(validation_result["fonts_used"]) == 3
        assert "Arial" in validation_result["fonts_used"]
        assert "Times" in validation_result["fonts_used"]
        assert "Helvetica" in validation_result["fonts_used"]

    @patch("src.engine.batch_modifier.FontValidator")
    def test_font_validation_with_missing_fonts(self, mock_font_validator):
        """Test font validation with missing fonts."""
        # Mock font validator to simulate missing fonts
        mock_validator = Mock()
        mock_validator.is_font_available.side_effect = lambda font: font != "MissingFont"
        mock_validator.check_glyph_coverage.return_value = True
        mock_validator.is_font_licensed.return_value = True
        mock_font_validator.return_value = mock_validator

        # Create document with missing font
        text_element = TextElement(
            id="text_missing_font",
            bbox=BoundingBox(10, 10, 100, 30),
            raw_text="Test",
            text="Test",
            font_details=FontDetails(name="MissingFont", size=12, color=Color(0, 0, 0)),
            z_index=1,
        )

        layer = Layer(
            layer_id="test_layer",
            layer_name="Test Layer",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 200, 200),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=[text_element],
        )

        page = PageUnit(
            page_number=0,
            size=(200, 200),
            background_color=None,
            layers=[layer],
        )

        document = UniversalDocument(
            engine="test",
            engine_version="1.0",
            metadata=DocumentMetadata(),
            document_structure=[page],
        )

        modifier = BatchModifier()
        validation_result = modifier.validate_document_fonts(document)

        assert validation_result["overall_status"] == "failed"
        assert "MissingFont" in validation_result["fonts_missing"]
        assert len(validation_result["elements_with_issues"]) == 1

    def test_get_substitution_statistics(self):
        """Test substitution statistics generation."""
        stats = self.modifier.get_substitution_statistics(self.test_document)

        assert stats["total_text_elements"] == 3
        assert stats["elements_with_variables"] == 2
        assert "COMPANY_NAME" in stats["variable_patterns_found"]
        assert "DATE" in stats["variable_patterns_found"]
        assert len(stats["substitution_opportunities"]) == 2

    def test_batch_modification_result_serialization(self):
        """Test that BatchModificationResult can be serialized to JSON."""
        result = BatchModificationResult(
            success=True,
            modified_elements=5,
            skipped_elements=2,
            font_warnings=["Font Arial not available"],
            details={"test": "data"},
        )

        # Should not raise an exception
        json_str = json.dumps(result.__dict__, default=str)
        assert json_str is not None

    def test_variable_substitution_with_empty_variables(self):
        """Test variable substitution with empty variable list."""
        result = self.modifier.variable_substitution(
            document=self.test_document,
            variables=[],
        )

        assert result.success
        assert result.modified_elements == 0
        assert result.skipped_elements == 3

    def test_batch_text_replacement_with_empty_replacements(self):
        """Test batch text replacement with empty replacement list."""
        result = self.modifier.batch_text_replacement(
            document=self.test_document,
            replacements=[],
        )

        assert result.success
        assert result.modified_elements == 0
        assert result.skipped_elements == 3

    def test_document_with_no_text_elements(self):
        """Test batch modification on document with no text elements."""
        # Create document with no text elements
        layer = Layer(
            layer_id="test_layer",
            layer_name="Test Layer",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 200, 200),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=[],  # No text elements
        )

        page = PageUnit(
            page_number=0,
            size=(200, 200),
            background_color=None,
            layers=[layer],
        )

        document = UniversalDocument(
            engine="test",
            engine_version="1.0",
            metadata=DocumentMetadata(),
            document_structure=[page],
        )

        # Test batch replacement
        result = self.modifier.batch_text_replacement(
            document=document,
            replacements=[("Hello", "Hi")],
        )

        assert result.success
        assert result.modified_elements == 0
        assert result.skipped_elements == 0

    def test_variable_substitution_with_nested_variables(self):
        """Test variable substitution with nested variable patterns."""
        # Create document with nested variables
        text_element = TextElement(
            id="text_nested",
            bbox=BoundingBox(10, 10, 100, 30),
            raw_text="Hello ${NAME}, welcome to ${COMPANY} on ${DATE}",
            text="Hello ${NAME}, welcome to ${COMPANY} on ${DATE}",
            font_details=FontDetails(name="Arial", size=12, color=Color(0, 0, 0)),
            z_index=1,
        )

        layer = Layer(
            layer_id="test_layer",
            layer_name="Test Layer",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 200, 200),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=[text_element],
        )

        page = PageUnit(
            page_number=0,
            size=(200, 200),
            background_color=None,
            layers=[layer],
        )

        document = UniversalDocument(
            engine="test",
            engine_version="1.0",
            metadata=DocumentMetadata(),
            document_structure=[page],
        )

        variables = [
            VariableSubstitution(variable_name="NAME", replacement_value="John"),
            VariableSubstitution(variable_name="COMPANY", replacement_value="Acme Corp"),
            VariableSubstitution(variable_name="DATE", replacement_value="2024-01-15"),
        ]

        result = self.modifier.variable_substitution(
            document=document,
            variables=variables,
        )

        assert result.success
        assert result.modified_elements == 1

        # Check that all variables were substituted
        text_element = document.document_structure[0].layers[0].content[0]
        assert text_element.text == "Hello John, welcome to Acme Corp on 2024-01-15"


class TestBatchModifierCLI:
    """Test the batch modifier CLI interface."""

    def setup_method(self):
        """Set up test fixtures."""
        self.temp_dir = tempfile.mkdtemp()

    def teardown_method(self):
        """Clean up test fixtures."""
        import shutil

        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_cli_replace_command(self):
        """Test the CLI replace command."""
        # Create test document
        document = self._create_test_document()
        input_file = os.path.join(self.temp_dir, "test_document.json")
        output_file = os.path.join(self.temp_dir, "output_document.json")

        with open(input_file, "w") as f:
            json.dump(document.to_dict(), f, indent=2)

        # Test CLI command
        import sys

        from src.cli.batch_modifier_cli import main

        # Mock sys.argv for CLI testing
        original_argv = sys.argv
        sys.argv = [
            "batch_modifier_cli.py",
            "replace",
            "--input",
            input_file,
            "--output",
            output_file,
            "--replacements",
            "Hello:Hi",
            "World:Universe",
        ]

        try:
            main()
        except SystemExit:
            pass  # Expected for CLI
        finally:
            sys.argv = original_argv

        # Verify output file was created
        assert os.path.exists(output_file)

        # Verify modifications were applied
        with open(output_file) as f:
            modified_doc = json.load(f)

        # Check that text was replaced
        text_content = modified_doc["document_structure"][0]["layers"][0]["content"][0]["text"]
        assert text_content == "Hi Universe"

    def _create_test_document(self):
        """Create a test document for CLI testing."""
        text_element = TextElement(
            id="text_1",
            bbox=BoundingBox(10, 10, 100, 30),
            raw_text="Hello World",
            text="Hello World",
            font_details=FontDetails(name="Arial", size=12, color=Color(0, 0, 0)),
            z_index=1,
        )

        layer = Layer(
            layer_id="test_layer",
            layer_name="Test Layer",
            layer_type=LayerType.BASE,
            bbox=BoundingBox(0, 0, 200, 200),
            visibility=True,
            opacity=1.0,
            blend_mode=BlendMode.NORMAL,
            children=[],
            content=[text_element],
        )

        page = PageUnit(
            page_number=0,
            size=(200, 200),
            background_color=None,
            layers=[layer],
        )

        document = UniversalDocument(
            engine="test",
            engine_version="1.0",
            metadata=DocumentMetadata(),
            document_structure=[page],
        )

        return document
