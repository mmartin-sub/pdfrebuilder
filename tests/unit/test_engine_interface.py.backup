"""
Unit tests for engine interface standardization.
Tests that all engines implement the required interfaces correctly.
"""

from abc import ABC

import pytest

from src.engine.document_parser import DocumentParser, PDFParser, PSDParser


class TestEngineInterface:
    """Test that all engines implement the standardized interface"""

    def test_document_parser_is_abstract(self):
        """Test that DocumentParser is properly abstract"""
        assert issubclass(DocumentParser, ABC)

        # Should not be able to instantiate abstract class
        with pytest.raises(TypeError):
            DocumentParser()

    def test_pdf_parser_implements_interface(self):
        """Test that PDFParser properly implements DocumentParser interface"""
        parser = PDFParser()

        # Check that all required methods exist
        assert hasattr(parser, "can_parse")
        assert hasattr(parser, "parse")
        assert hasattr(parser, "extract_assets")

        # Check method signatures
        assert callable(parser.can_parse)
        assert callable(parser.parse)
        assert callable(parser.extract_assets)

    def test_psd_parser_implements_interface(self):
        """Test that PSDParser properly implements DocumentParser interface"""
        parser = PSDParser()

        # Check that all required methods exist
        assert hasattr(parser, "can_parse")
        assert hasattr(parser, "parse")
        assert hasattr(parser, "extract_assets")

        # Check method signatures
        assert callable(parser.can_parse)
        assert callable(parser.parse)
        assert callable(parser.extract_assets)

    def test_parse_method_signature_consistency(self):
        """Test that parse method signatures are consistent across engines"""
        pdf_parser = PDFParser()
        psd_parser = PSDParser()

        # Both should accept the same parameters
        # This is tested by ensuring no TypeError is raised with standard parameters
        test_file = "nonexistent.pdf"  # File doesn't need to exist for signature test
        test_flags = {"extract_text": True}

        # Should not raise TypeError for signature mismatch
        try:
            # These will fail for other reasons (file not found, etc.) but not signature issues
            pdf_parser.can_parse(test_file)
            psd_parser.can_parse(test_file)
        except (FileNotFoundError, ValueError, NotImplementedError):
            # These are expected for non-existent files
            pass

    def test_extraction_flags_parameter_optional(self):
        """Test that extraction_flags parameter is optional in all parsers"""
        pdf_parser = PDFParser()
        psd_parser = PSDParser()

        # Should be able to call parse without extraction_flags
        test_file = "nonexistent.pdf"

        try:
            # These will fail for other reasons but should not fail due to missing parameter
            pdf_parser.can_parse(test_file)
            psd_parser.can_parse(test_file)
        except (FileNotFoundError, ValueError, NotImplementedError):
            # These are expected for non-existent files
            pass

    def test_return_types(self):
        """Test that methods return expected types"""
        pdf_parser = PDFParser()

        # can_parse should return bool
        result = pdf_parser.can_parse("nonexistent.pdf")
        assert isinstance(result, bool)

        # For existing test files, we can test more thoroughly
        # This would require actual test files to be present
