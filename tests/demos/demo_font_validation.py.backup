#!/usr/bin/env python3
"""
Demonstration script for font validation functionality.

This script shows how the font validation system works with document
processing, including font availability checking, substitution tracking,
and validation reporting.
"""

import json
import os
import tempfile

from src.engine.validation_report import ValidationResult
from src.font.font_validator import FontValidator
from src.font_utils import set_font_validator


def create_sample_layout_config():
    """Create a sample layout configuration for demonstration"""
    return {
        "version": "1.0",
        "engine": "fitz",
        "metadata": {
            "title": "Font Validation Demo Document",
            "author": "Font Management System",
        },
        "document_structure": [
            {
                "type": "page",
                "page_number": 0,
                "size": [612, 792],
                "layers": [
                    {
                        "layer_id": "page_0_base_layer",
                        "layer_name": "Page Content",
                        "content": [
                            {
                                "type": "text",
                                "id": "text_0",
                                "text": "This text uses Arial font",
                                "font_details": {
                                    "name": "Arial",
                                    "size": 12,
                                    "color": 0,
                                },
                            },
                            {
                                "type": "text",
                                "id": "text_1",
                                "text": "This text uses a missing font",
                                "font_details": {
                                    "name": "NonExistentFont",
                                    "size": 14,
                                    "color": 0,
                                },
                            },
                            {
                                "type": "text",
                                "id": "text_2",
                                "text": "Standard PDF font text",
                                "font_details": {
                                    "name": "helv",
                                    "size": 10,
                                    "color": 0,
                                },
                            },
                            {
                                "type": "text",
                                "id": "text_3",
                                "text": "Text with special characters: √±√°√©√≠√≥√∫",
                                "font_details": {
                                    "name": "Times-Roman",
                                    "size": 12,
                                    "color": 0,
                                },
                            },
                        ],
                    }
                ],
            },
            {
                "type": "page",
                "page_number": 1,
                "size": [612, 792],
                "layers": [
                    {
                        "layer_id": "page_1_base_layer",
                        "layer_name": "Page 2 Content",
                        "content": [
                            {
                                "type": "text",
                                "id": "text_4",
                                "text": "Another missing font example",
                                "font_details": {
                                    "name": "AnotherMissingFont",
                                    "size": 16,
                                    "color": 0,
                                },
                            }
                        ],
                    }
                ],
            },
        ],
    }


def demonstrate_font_validation():
    """Demonstrate font validation functionality"""
    print("üî§ Font Validation System Demonstration")
    print("=" * 50)

    # Create temporary directory for demonstration
    with tempfile.TemporaryDirectory() as temp_dir:
        fonts_dir = os.path.join(temp_dir, "fonts")
        os.makedirs(fonts_dir, exist_ok=True)

        print(f"üìÅ Using temporary fonts directory: {fonts_dir}")

        # Create sample layout configuration
        layout_config = create_sample_layout_config()
        config_path = os.path.join(temp_dir, "layout_config.json")

        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(layout_config, f, indent=2)

        print(f"üìÑ Created sample layout config: {config_path}")

        # Initialize font validator
        font_validator = FontValidator(fonts_dir)
        set_font_validator(font_validator)

        print(f"üîç Available fonts in directory: {len(font_validator.available_fonts)}")

        # Perform font validation
        print("\nüîç Performing font validation...")
        validation_result = font_validator.validate_document_fonts(layout_config)

        # Display validation results
        print("\nüìä Font Validation Results:")
        print(f"  ‚Ä¢ Fonts required: {len(validation_result.fonts_required)}")
        print(f"  ‚Ä¢ Fonts available: {len(validation_result.fonts_available)}")
        print(f"  ‚Ä¢ Fonts missing: {len(validation_result.fonts_missing)}")
        print(f"  ‚Ä¢ Font substitutions: {len(validation_result.fonts_substituted)}")
        print(f"  ‚Ä¢ Coverage issues: {len(validation_result.font_coverage_issues)}")
        print(f"  ‚Ä¢ Validation passed: {validation_result.validation_passed}")

        # Show detailed information
        if validation_result.fonts_required:
            print(f"\nüìù Required fonts: {', '.join(validation_result.fonts_required)}")

        if validation_result.fonts_available:
            print(f"‚úÖ Available fonts: {', '.join(validation_result.fonts_available)}")

        if validation_result.fonts_missing:
            print(f"‚ùå Missing fonts: {', '.join(validation_result.fonts_missing)}")

        # Simulate font substitutions
        print("\nüîÑ Simulating font substitutions...")
        font_validator.track_font_substitution(
            original_font="NonExistentFont",
            substituted_font="Arial",
            reason="Font not found in system",
            text_content="This text uses a missing font",
            element_id="text_1",
            page_number=0,
        )

        font_validator.track_font_substitution(
            original_font="AnotherMissingFont",
            substituted_font="helv",
            reason="Font not available",
            text_content="Another missing font example",
            element_id="text_4",
            page_number=1,
        )

        print(f"üìù Tracked {len(font_validator.substitution_tracker)} font substitutions")

        # Show substitution details
        for i, sub in enumerate(font_validator.substitution_tracker, 1):
            print(f"  {i}. {sub.original_font} ‚Üí {sub.substituted_font} ({sub.reason})")
            if sub.element_id:
                print(
                    f"     Element: {sub.element_id}, Page: {sub.page_number + 1 if sub.page_number is not None else 'N/A'}"
                )

        # Display validation messages
        if validation_result.validation_messages:
            print("\nüìã Validation Messages:")
            for message in validation_result.validation_messages:
                print(f"  ‚Ä¢ {message}")

        # Generate font validation report
        print("\nüìÑ Generating font validation report...")
        # If you want to keep the call but discard the result:
        _ = font_validator.get_font_validation_report()

        # Convert validation result to dict for report generation
        font_validation_data = {
            "fonts_required": list(validation_result.fonts_required),
            "fonts_available": list(validation_result.fonts_available),
            "fonts_missing": list(validation_result.fonts_missing),
            "fonts_substituted": [
                {
                    "original_font": sub.original_font,
                    "substituted_font": sub.substituted_font,
                    "reason": sub.reason,
                    "text_content": sub.text_content,
                    "element_id": sub.element_id,
                    "page_number": sub.page_number,
                }
                for sub in validation_result.fonts_substituted + font_validator.substitution_tracker
            ],
            "font_coverage_issues": validation_result.font_coverage_issues,
            "validation_passed": validation_result.validation_passed,
            "validation_messages": validation_result.validation_messages,
        }

        # Create a mock validation result for demonstration
        mock_validation_result = ValidationResult(
            passed=True,
            ssim_score=0.95,
            threshold=0.9,
            original_path="demo_original.pdf",
            generated_path="demo_generated.pdf",
        )

        # Generate comprehensive validation report with font information
        from src.engine.validation_report import generate_validation_report

        reports_dir = os.path.join(temp_dir, "reports")
        report_paths = generate_validation_report(
            original_path="demo_original.pdf",
            generated_path="demo_generated.pdf",
            validation_result=mock_validation_result,
            output_dir=reports_dir,
            report_formats=["json", "html"],
            font_validation_result=font_validation_data,
        )

        print("üìä Generated validation reports:")
        for format_type, path in report_paths.items():
            print(f"  ‚Ä¢ {format_type.upper()}: {path}")
            if os.path.exists(path):
                file_size = os.path.getsize(path)
                print(f"    Size: {file_size} bytes")

        # Show sample of JSON report content
        if "json" in report_paths and os.path.exists(report_paths["json"]):
            print("\nüìÑ Sample JSON report content:")
            with open(report_paths["json"], encoding="utf-8") as f:
                report_data = json.load(f)

            if "metadata" in report_data and "font_validation" in report_data["metadata"]:
                font_data = report_data["metadata"]["font_validation"]
                print(f"  ‚Ä¢ Fonts required: {len(font_data.get('fonts_required', []))}")
                print(f"  ‚Ä¢ Fonts missing: {len(font_data.get('fonts_missing', []))}")
                print(f"  ‚Ä¢ Substitutions: {len(font_data.get('fonts_substituted', []))}")

        print("\n‚úÖ Font validation demonstration completed!")
        print(f"üìÅ Reports saved in: {reports_dir}")

        # Keep the reports for inspection
        import shutil

        from src.settings import get_config_value

        permanent_dir = get_config_value("font_validation_demo_reports_dir")
        if os.path.exists(permanent_dir):
            shutil.rmtree(permanent_dir)
        shutil.copytree(reports_dir, permanent_dir)
        print(f"üìÅ Reports copied to: {os.path.abspath(permanent_dir)}")


if __name__ == "__main__":
    demonstrate_font_validation()
