# pyproject.toml

[project]
name = "pdfrebuilder"
version = "0.1.0"
description = "Extract and rebuild PDF layouts with high fidelity"
authors = [
    {name = "PDFRebuilder Team", email = "team@pdfrebuilder.dev"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["pdf", "layout", "extraction", "rebuilding", "document-processing", "psd"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: General",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
]

dependencies = [
    "PyMuPDF>=1.26",
    "json5>=0.9.14",
    "Pillow>=10.2.0",
    "rich>=13.7.0",
    "fonttools[ufo,lxml,woff,unicode]>=4.47.0",
    "requests>=2.31.0",
    "typer>=0.9.0",
    "types-requests>=2.31.0",
    "defusedxml>=0.7.1",
    "reportlab>=4.0.0",
    "plumbum>=1.8.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "platformdirs>=4.0.0",
    "tomli>=2.0.0; python_version<'3.11'",
    "tomli-w>=1.0.0",
    "psutil>=7.0.0",
    "opencv-python>=4.12.0",
    "pytesseract>=0.3.13",
]

[project.urls]
Homepage = "https://github.com/mmartin-sub/pdfrebuilder"
Documentation = "https://github.com/mmartin-sub/pdfrebuilder"
Repository = "https://github.com/mmartin-sub/pdfrebuilder"
Issues = "https://github.com/mmartin-sub/pdfrebuilder/issues"

[project.scripts]
pdfrebuilder = "pdfrebuilder.cli:main"

[project.optional-dependencies]
psd = [ "psd-tools>=1.10.9", "numpy>=1.24.0" ]
wand = [ "Wand>=0.6.13" ]
validation = [ "scikit-image>=0.25.2", "numpy>=1.24.0" ]
test = [ "pytest>=7.4.0", "pytest-cov>=4.1.0" ]
# The 'dev' group now exclusively lists tools for the lint environment.
dev = [
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "vulture>=2.14",
    "autoflake",
]
all = [ "pdfrebuilder[psd,wand,validation,test]" ] # we exclude dev

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pdfrebuilder"]


[tool.hatch.build.targets.sdist]
exclude = [
    ".trunk/", ".git/", ".kiro/", "book/", "*.log", "test_*", "__pycache__/",
    "*.pyc", ".pytest_cache/", ".mypy_cache/", ".ruff_cache/",
]

# --- CORRECTED: Default Environment for running/testing your code ---
[tool.hatch.envs.default]
python = "3.12"
dev-mode = true
# This explicitly installs the project itself in editable mode with all testing extras.
# This is the canonical, documented way to set up a testing environment.
dependencies = [
  "pdfrebuilder[test,psd,wand,validation,dev]",
]

[tool.hatch.envs.default.scripts]
# Scripts here are for testing the project code itself.
test = "pytest {args:tests/}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src --cov=tests {args:.}"
test-unit = "pytest {args:tests/unit/}"
# (Add other testing scripts here if needed)

# --- CORRECTED: Dedicated Lint Environment for all dev tools ---
[tool.hatch.envs.lint]
# detached=true is a best practice for tooling environments.
# detached = true
# We explicitly list the dev tools here. No more magic.
dev-mode = true
dependencies = [
  "black>=23.12.0",
  "ruff>=0.1.9",
  "mypy>=1.8.0",
  "bandit>=1.7.5",
  "vulture>=2.14",
  "autoflake>=2.3",
]

[tool.hatch.envs.lint.scripts]
types = "mypy --package pdfrebuilder"
lint-ruff = "ruff check ."

# A single command to fix everything possible. Note the list format for clarity.
fix = [
  "autoflake --in-place --remove-all-unused-imports --recursive .",
  "ruff check . --fix",
  "black .",
  "ruff format .",
]
# A single command to check everything.
check = [
  "black --check --diff .",
  "lint-ruff",
  "types",  # <-- This now calls your 'mypy src' script
  "vulture . --min-confidence 80",
  "bandit -r .",
]

# circular reference: Circular expansion detected for field `tool.hatch.envs.lint.scripts`: check -> mypy -> mypy
# check-black =  "black --check --diff ."
# mypy =  "mypy src"
debug-autoflake = "autoflake --in-place --remove-all-unused-imports tests/utils/validate_backward_compatibility_tests.py"
debug-ruff = "ruff check tests/utils/validate_backward_compatibility_tests.py --select F401 --unsafe-fixes"

# --- Documentation Environment (Independent) ---
[tool.hatch.envs.docs]
detached = true
dependencies = [
    # Sphinx and documentation tools
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "sphinx-autobuild>=2021.3.14",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-design>=0.5.0",
    # Project dependencies needed for autodoc
    "PyMuPDF>=1.26",
    "json5>=0.9.14",
    "Pillow>=10.2.0",
    "rich>=13.7.0",
    "fonttools[ufo,lxml,woff,unicode]>=4.47.0",
    "requests>=2.31.0",
    "typer>=0.9.0",
    "types-requests>=2.31.0",
    "defusedxml>=0.7.1",
    "reportlab>=4.0.0",
    "plumbum>=1.8.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "platformdirs>=4.0.0",
    "tomli>=2.0.0; python_version<'3.11'",
    "tomli-w>=1.0.0",
    "psutil>=7.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs/source docs/build/html"
build-pdf = "sphinx-build -b latex docs/source docs/build/latex && make -C docs/build/latex"
build-epub = "sphinx-build -b epub docs/source docs/build/epub"
live = "sphinx-autobuild docs/source docs/build/html --open-browser --watch src/"
clean = "rm -rf docs/build/*"
linkcheck = "sphinx-build -b linkcheck docs/source docs/build/linkcheck"

# (The rest of the file remains the same)
[tool.pytest.ini_options]
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "WARNING"
log_disable = ["fontTools.ttLib.ttFont", "fontTools.ttLib", "fontTools"]
markers = [
    "human_review: marks tests requiring human visual review", "e2e: marks end-to-end integration tests",
    "unit: marks unit tests", "integration: marks integration tests", "performance: marks performance tests",
    "psd: marks tests requiring PSD support (psd-tools)", "validation: marks tests requiring image validation (scikit-image)",
    "ocr: marks tests requiring OCR support (pytesseract)", "optional_deps: marks tests requiring any optional dependencies"
]

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache", ".nox", ".pants.d", ".ruff_cache",
    ".svn", ".tox", ".venv", "__pypackages__", "_build", "buck-out", "build", "dist", "node_modules", "venv",
]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = ["E", "F", "I", "W", "B", "C4", "UP"]
ignore = ["E501", "B008", "B904", "E203"]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["pdfrebuilder"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["B007", "B017", "F841",  "F401", "E501", "RUF002", "RUF003"]
"examples/**/*.py" = ["B007", "B017", "F841",  "F401", "E501", "RUF002", "RUF003", "E402"]
"scripts/**/*.py" = ["B007", "B017", "F841",  "F401", "E501",  "E402"]
"docs/examples/**/*.py" = ["B007", "B017", "F841",  "F401", "E501", "RUF002", "RUF003"]
"**/__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.mypy]
python_version = "3.12"
mypy_path = "src"
exclude = [".venv", "build", "dist", ".trunk", "docs"]

# Prevent duplicate scanning, try with removing detached
explicit_package_bases = true
namespace_packages = true

warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
warn_no_return = true
warn_unreachable = false

check_untyped_defs = true

disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false

strict_equality = true
show_error_codes = true
allow_redefinition = true
allow_untyped_globals = true

[[tool.mypy.overrides]]
module = ["fitz", "cv2", "skimage", "skimage.metrics", "fontTools.ttLib", "json5"]
ignore_missing_imports = true

# Skip problematic modules during migration
[[tool.mypy.overrides]]
module = [
    "src.models.universal_idm", "src.models.psd_effects", "src.engine.extract_psd_content",
    "src.engine.psd_text_processor", "src.engine.document_parser", "src.engine.document_renderer",
    "src.compare_pdfs_visual", "extract_sample", "src.font.googlefonts",
    "src.font_utils", "src.render", "src.engine.*", "src.security.*",
    "src.generate_debug_pdf_layers", "src.cli.*", "src.recreate_pdf_from_config",
    "src.config.manager", "src.settings", "src.utils.*", "src.pdf_engine",
    "src.fritz", "main"
]
ignore_errors = true

# Skip imports for problematic third-party modules
[[tool.mypy.overrides]]
module = [
    "fitz.*",
    "PIL.*",
    "reportlab.*",
    "rich.*",
    "json5.*",
    "pytest.*",
    "psd_tools.*",
    "fontTools.*",
    "psutil.*",
    "jsonschema.*",
    "defusedxml.*",
    "wand.*",
    "pytesseract.*",
    "tomllib.*",
    "plumbum.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
follow_imports = "skip"

[tool.bandit]
exclude_dirs = [
    "tests", "examples", ".kiro", "projects", "templates", ".history", "book", "downloaded_fonts",
    "images", "input", "output", "reports", "custom_images", "custom_output", "custom_reports",
    "dev_output", "dev_reports", ".venv", ".mypy_cache", ".ruff_cache", ".pytest_cache", "__pycache__", "fonts",
]
skips = ["B101", "B108", "B601", "B602"]
confidence = "MEDIUM"
severity = "MEDIUM"
recursive = true
aggregate = "file"
number = 3
format = "txt"

[tool.bandit.assert_used]
skips = ["*test*.py", "tests/*", "scripts/*"]

[tool.bandit.hardcoded_tmp_directory]
skips = ["scripts/*"]

[tool.bandit.security_review]
review_frequency = "6_months"
next_review_date = "2025-07-08"
reviewer = "security_team"

[tool.bandit.suppressions]
track_suppressions = true
require_justification = true

[tool.pyright]
pythonVersion = "3.12"
include = ["src", "tests"]
exclude = [".venv", "build", "dist", "**/__pycache__", ".trunk", "docs"]
typeCheckingMode = "standard" # Changed from "basic", could be "strict"
reportMissingImports = true
reportMissingTypeStubs = false
